df['x'].quantile(0.25)   @@check @@get @@it
@type(df)の@type('x',カラム)[についての|の][第一四分位数|下位25%|下位の25%|下位4分の１|下位の4分の１]


df['x'].quantile(0.75)   @@check @@get @@it
@type(df)の@type('x',カラム)[についての|の][第三四分位数|上位25%|上位の25%|上位4分の１|上位の4分の１]

df['x'].max()   @@check @@get @@it
@type(df)の@type('x',カラム)[についての|の][最大値|最大]

df['x'].min()   @@check @@get @@it
@type(df)の@type('x',カラム)[についての|の][最小値|最小]

# 確認 headerに取られてうまく出力されないので追加で入れる？]
# csvファイル"movie2021.csv"を読み込み、データフレームdataに代入する
# csv = pd. read_csv ( "movie2021.csv", header = data )
# csvファイル"movie2021.csv"を読み込む
# pd. read_csv ( csv, header = "movie2021.csv" )

pd.read_csv('file.csv')   @@let
@type('file.csv', ファイル)[を|から][データフレームとして|データフレームで|]読み込む
データフレームを@type('file.csv')から読み込む
CSVファイル'file.csv'[を|から][データフレームとして|]読み込む
CSVファイル'file.csv'からデータフレームを読み込む
@type('file.csv')をデータフレームに格納する
CSVファイル'file.csv'をデータフレームに格納する

len(df) @@calc
@type(df)の[データ数|データの数|データ件数|データの件数]
@type(df)[の中|内|]に[何件|いくつ]データがあるか

df.corr()['x']
@type(df)の@type('x',カラム)との[相関係数|相関]

df.corr()['x'].sort_values()
@type(df)の@type('x',カラム)との相関係数を順番に表示
@type(df)の@type('x',カラム)との相関係数の値を[高い順に並べて|ソートして]表示する

df.plot.scatter(x='a', y='b')
@type(df)の@type('a',カラム)をx軸、@type('b',カラム)をy軸とした散布図
@type(df)の@type('a',カラム)と@type('b',カラム)で散布図を書く

model = KMeans(n_clusters=4)
KMean法で4つの[クラスター|クラスタ|グループ]に[分類する|分ける][ための|]モデルを用意

model.fit(df)
dfでモデルを[学習する|学習させる|学習]

#PCA
pca = PCA(n_components=2)
[主成分分析で|]２次元に次元圧縮する用意

pca.fit_transform(df)
[主成分分析で|]@type(df)を２次元に次元圧縮

#線形回帰
model = LinearRegression()
線形回帰のモデルを用意
数値予測をするモデルを用意

model.fit(X_train, y_train)
X_trainとy_trainでモデルを[学習する|学習させる]

model.predict(X_test)
X_testから予測

model.score(X_test, y_test)@@calc
X_test, y_testでのモデルの決定係数

model.score(X_train, y_train)@@calc
X_train, y_trainでのモデルの決定係数

#ホールドアウト法
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
学習データとテストデータを[7:3で|]分割する
学習データとテストデータをホールドアウト法で分割する
ホールドアウト法で分割する

#ロジスティック回帰
model = LogisticRegression()
ロジスティック回帰のモデルを用意
2クラス分類をするモデルを用意

#決定木
model = DecisionTreeClassifier()
決定木のモデルを用意
2クラス分類をするモデルを用意

#SVC
model = LinearSVC()
サポートベクターマシンのモデルを用意
2クラス分類をするモデルを用意